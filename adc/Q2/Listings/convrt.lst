


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ********
    2 00000000         ; Program CONVRT.s
    3 00000000         ;*******************************************************
                       ********
    4 00000000         ;SYMBOL  DIRECTIVE VALUE   COMMENT
    5 00000000 3B9ACA00 
                       DIVISOR EQU              1000000000  ;0x3B9ACA00
    6 00000000 20004000 
                       RESERVED
                               EQU              0x20004000
    7 00000000 0000000A 
                       TEN     EQU              0xA
    8 00000000         ;*******************************************************
                       ********
    9 00000000         ; Program section
   10 00000000         ;*******************************************************
                       ********
   11 00000000         ;LABEL  DIRECTIVE VALUE   COMMENT
   12 00000000                 AREA             main, READONLY, CODE
   13 00000000                 THUMB
   14 00000000                 EXTERN           OutStr      ; Reference externa
                                                            l subroutine 
   15 00000000                 EXPORT           CONVRT      ; Make available
   16 00000000         
   17 00000000 E92D 1F7F 
                       CONVRT  PUSH             {R0-R6,R8-R12} 
                                                            ; store registers
   18 00000004 481B            LDR              R0,=DIVISOR ; Initialization of
                                                             registers
   19 00000006 4D1C            LDR              R5,=RESERVED ;
   20 00000008 F04F 0300       MOV              R3,#0x0
   21 0000000C F04F 0400       MOV              R4,#0x0
   22 00000010 F04F 020A       MOV              R2,#0xA
   23 00000014         
   24 00000014 FBB7 F1F0 
                       zeros   UDIV             R1,R7,R0    ; R1 <- R7 % R0*
   25 00000018 1B0E            SUBS             R6,R1,R4    ; remove higher ord
                                                            er digits
   26 0000001A F106 0630       ADD              R6,#0x30    ; Convert R6 into a
                                                            scii code
   27 0000001E 2E30            CMP              R6,#0x30    ; check if R6 is ze
                                                            ro
   28 00000020 D001            BEQ              jump        ; go to nonzero if 
                                                            the first nonzero e
                                                            ntry comes
   29 00000022 46A8            MOV              R8,R5
   30 00000024 E011            B                ignore
   31 00000026 F04F 0620 
                       jump    MOV              R6,#0x20    ; R6 <- SPACE
   32 0000002A F805 6B01       STRB             R6,[R5],#1  ; Store R6 to memor
                                                            y
   33 0000002E FB01 F402       MUL              R4,R1,R2    ; higher order digi
                                                            ts 
   34 00000032 FBB0 F0F2       UDIV             R0,R2       ; DIVISOR <- DIVISO
                                                            R/10 for the next i
                                                            nteger
   35 00000036 2800            CMP              R0,#0
   36 00000038 D1EC            BNE              zeros



ARM Macro Assembler    Page 2 


   37 0000003A F1A5 0502       SUB              R5,#2
   38 0000003E 46A8            MOV              R8,R5
   39 00000040 FBB7 F1F0 
                       nonzero UDIV             R1,R7,R0    ; R1 <- R4 % R0*
   40 00000044 1B0E            SUBS             R6,R1,R4    ; remove higher ord
                                                            er digits
   41 00000046 F106 0630       ADD              R6,#0x30    ; Convert into asci
                                                            i code
   42 0000004A F805 6B01 
                       ignore  STRB             R6,[R5],#1
   43 0000004E FB01 F402       MUL              R4,R1,R2    ; higher order digi
                                                            ts    
   44 00000052 FBB0 F0F2       UDIV             R0,R2       ; DIVISOR <- DIVISO
                                                            R/10 for the next i
                                                            nteger
   45 00000056 2800            CMP              R0,#0
   46 00000058 D1F2            BNE              nonzero
   47 0000005A F04F 0004       MOV              R0,#0x04    ; end of the string
                                                            
   48 0000005E 7028            STRB             R0,[R5]
   49 00000060 4645            MOV              R5,R8       ; restore R5
   50 00000062 B500            PUSH             {LR}
   51 00000064 F7FF FFFE       BL               OutStr      ; Print the integer
                                                            
   52 00000068 F85D EB04       POP              {LR}
   53 0000006C         
   54 0000006C E8BD 1F7F       POP              {R0-R6,R8-R12} ; restore regist
                                                            ers*
   55 00000070 4770            BX               LR          ; Return to caller
   56 00000072         
   57 00000072         
   58 00000072 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
   59 00000074                 END                          ; end of file
              3B9ACA00 
              20004000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\convrt.d -o.\objects\convrt.o -I.\RTE\_Target_1 -IC:\
Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil_v5\ARM\CM
SIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526
" --predefine="TM4C123GH6PM SETA 1" --list=.\listings\convrt.lst CONVRT.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CONVRT 00000000

Symbol: CONVRT
   Definitions
      At line 17 in file CONVRT.s
   Uses
      At line 15 in file CONVRT.s
Comment: CONVRT used once
ignore 0000004A

Symbol: ignore
   Definitions
      At line 42 in file CONVRT.s
   Uses
      At line 30 in file CONVRT.s
Comment: ignore used once
jump 00000026

Symbol: jump
   Definitions
      At line 31 in file CONVRT.s
   Uses
      At line 28 in file CONVRT.s
Comment: jump used once
main 00000000

Symbol: main
   Definitions
      At line 12 in file CONVRT.s
   Uses
      None
Comment: main unused
nonzero 00000040

Symbol: nonzero
   Definitions
      At line 39 in file CONVRT.s
   Uses
      At line 46 in file CONVRT.s
Comment: nonzero used once
zeros 00000014

Symbol: zeros
   Definitions
      At line 24 in file CONVRT.s
   Uses
      At line 36 in file CONVRT.s
Comment: zeros used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DIVISOR 3B9ACA00

Symbol: DIVISOR
   Definitions
      At line 5 in file CONVRT.s
   Uses
      At line 18 in file CONVRT.s
Comment: DIVISOR used once
RESERVED 20004000

Symbol: RESERVED
   Definitions
      At line 6 in file CONVRT.s
   Uses
      At line 19 in file CONVRT.s
Comment: RESERVED used once
TEN 0000000A

Symbol: TEN
   Definitions
      At line 7 in file CONVRT.s
   Uses
      None
Comment: TEN unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OutStr 00000000

Symbol: OutStr
   Definitions
      At line 14 in file CONVRT.s
   Uses
      At line 51 in file CONVRT.s
Comment: OutStr used once
1 symbol
346 symbols in table
